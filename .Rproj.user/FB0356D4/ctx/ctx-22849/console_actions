{
    "type": [
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2
    ],
    "data": [
        "\nR version 4.4.2 (2024-10-31 ucrt) -- \"Pile of Leaves\"\nCopyright (C) 2024 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "# Fixed cost parameters",
        "> ",
        "lodge_d      <- 250     # daily lodging cost per family",
        "> ",
        "days         <- 13      # duration of trip",
        "> ",
        "lodge_total  <- lodge_d * days  # total lodging cost per family",
        "> ",
        "activity.adult <- 500   # total activity cost per adult (>12 years) over 14 days",
        "> ",
        "activity.child <- 250   # total activity cost per child (<=12 years) over 14 days",
        "> ",
        "labor_total    <- 6000    # total labor cost for 14 days",
        "> ",
        "tot.miles.travel <- 2000 # total estimated mileage ",
        "> ",
        "base_margin_rate <- 0.3 # base target profit margin rate",
        "> ",
        "",
        "> ",
        "# Define valid family compositions (1-2 adults, 0-2 children)",
        "> ",
        "compositions <- data.frame(",
        "+ ",
        "  num_adult    = c(1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4),",
        "+ ",
        "  num_children = c(0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3)",
        "+ ",
        ")",
        "> ",
        "",
        "> ",
        "# Create an empty data frame to store results",
        "> ",
        "results <- data.frame(",
        "+ ",
        "  family_id = character(),",
        "+ ",
        "  family_number = integer(),",
        "+ ",
        "  family_size = integer(),",
        "+ ",
        "  num_adult = integer(),",
        "+ ",
        "  num_children = integer(),",
        "+ ",
        "  car_rental_cost = numeric(),",
        "+ ",
        "  family_activity_cost = numeric(),",
        "+ ",
        "  family_lodge_cost    = numeric(),",
        "+ ",
        "  family_total_cost    = numeric(),",
        "+ ",
        "  family_person_cost    = numeric(),",
        "+ ",
        "  family_total_price   = numeric(),",
        "+ ",
        "  family_person_price   = numeric(),",
        "+ ",
        "  family_total_profit  = numeric()",
        "+ ",
        ")",
        "> ",
        "",
        "> ",
        "# Loop over family numbers (1 to 4)",
        "> ",
        "for (fam_no in 1:4) {",
        "+ ",
        "  # Loop over each family in the scenario",
        "+ ",
        "  for (fam_idx in 1:fam_no) {",
        "+ ",
        "    family_id <- paste0(\"F\", fam_idx)",
        "+ ",
        "    # Loop over all valid compositions for this family",
        "+ ",
        "    for (comp_idx in 1:nrow(compositions)) {",
        "+ ",
        "      num_adult <- compositions$num_adult[comp_idx]",
        "+ ",
        "      num_children <- compositions$num_children[comp_idx]",
        "+ ",
        "      family_size <- num_adult + num_children",
        "+ ",
        "      total_no.people <- fam_no*family_size",
        "+ ",
        "      # Determine car rental cost based on total number of people ",
        "+ ",
        "      if (total_no.people <= 5) {",
        "+ ",
        "        car_rental <- 1500  # 1 minivan",
        "+ ",
        "        tot.travel.expense <- tot.miles.travel * 0.35  # total travel expense",
        "+ ",
        "      } else if (total_no.people %in% 6:12) {",
        "+ ",
        "        car_rental <- 2000  # 1 full-size van",
        "+ ",
        "        tot.travel.expense <- tot.miles.travel * 0.55  # total travel expense",
        "+ ",
        "      } else if (total_no.people >12) {",
        "+ ",
        "        car_rental <- 3500  # 1 full-size van + 1 minivan",
        "+ ",
        "        tot.travel.expense <- tot.miles.travel * 0.75  # total travel expense",
        "+ ",
        "      }",
        "+ ",
        "      # Calculate activity cost for the family",
        "+ ",
        "      activity_cost <- activity.adult * num_adult + activity.child * num_children",
        "+ ",
        "      # Calculate total cost for the family",
        "+ ",
        "      tot_cost_family <- (lodge_total + activity_cost) + (labor_total + car_rental + tot.travel.expense)/fam_no",
        "+ ",
        "      # Calculate per person cost for the family",
        "+ ",
        "      family_person_cost <- tot_cost_family/family_size",
        "+ ",
        "      # Calculate weighted target margin rate (10% increase per family)",
        "+ ",
        "      target_margin_rate <- base_margin_rate * (1.2)^(fam_no - 1)",
        "+ ",
        "      # Calculate target profit and total price for the family",
        "+ ",
        "      target_profit_from_the_family <- target_margin_rate * tot_cost_family / (1 - target_margin_rate)",
        "+ ",
        "      tot_price_per_family <- tot_cost_family + target_profit_from_the_family",
        "+ ",
        "      # Calculate per person price for the family",
        "+ ",
        "      person_price_per_family <- tot_price_per_family/family_size",
        "+ ",
        "      # Store results in data frame",
        "+ ",
        "      results <- rbind(results, data.frame(",
        "+ ",
        "        family_id = family_id,",
        "+ ",
        "        family_number = fam_no,",
        "+ ",
        "        family_size = family_size,",
        "+ ",
        "        num_adult = num_adult,",
        "+ ",
        "        num_children = num_children,",
        "+ ",
        "        car_rental_cost = car_rental,",
        "+ ",
        "        family_activity_cost = activity_cost,",
        "+ ",
        "        family_lodge_cost    = lodge_total,",
        "+ ",
        "        family_total_cost    = tot_cost_family,",
        "+ ",
        "        family_person_cost    = family_person_cost,",
        "+ ",
        "        family_total_price   = tot_price_per_family,",
        "+ ",
        "        family_person_price   = person_price_per_family,",
        "+ ",
        "        family_total_profit  = target_profit_from_the_family",
        "+ ",
        "      ))",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Save results for Shiny app",
        "> ",
        "saveRDS(results, \"tour_cost_results.rds\")",
        "> ",
        "# View the results",
        "> ",
        "View(results)",
        "> ",
        "library(ggplot2)",
        "> ",
        "# Create the plot",
        "> ",
        "ggplot(results, aes(x = family_size, y = family_person_price, color = factor(num_adult), shape = factor(num_children))) +",
        "+ ",
        "  geom_point(size = 3) +",
        "+ ",
        "  facet_wrap(~ family_number, ncol = 2, labeller = labeller(family_number = function(x) paste(\"Family Number =\", x))) +",
        "+ ",
        "  scale_color_manual(values = c(\"1\" = \"blue\", \"2\" = \"red\", \"3\" = \"green\", \"4\" = \"purple\"), name = \"Number of Adults\") +",
        "+ ",
        "  scale_shape_manual(values = c(\"0\" = 16, \"1\" = 17, \"2\" = 15, \"3\" = 18), name = \"Number of Children\") +",
        "+ ",
        "  labs(",
        "+ ",
        "    title = \"Per-Person Price vs. Family Size by Family Number\",",
        "+ ",
        "    x = \"Family Size\",",
        "+ ",
        "    y = \"Per-Person Price (USD)\"",
        "+ ",
        "  ) +",
        "+ ",
        "  theme_minimal() +",
        "+ ",
        "  theme(",
        "+ ",
        "    legend.position = \"bottom\",",
        "+ ",
        "    plot.title = element_text(hjust = 0.5, size = 14),",
        "+ ",
        "    strip.text = element_text(size = 12)",
        "+ ",
        "  ) +",
        "+ ",
        "  scale_x_continuous(breaks = 1:7)",
        "> ",
        "# Save the plot",
        "> ",
        "ggsave(\"family_person_price_plot.png\", width = 8, height = 6)",
        "> ",
        "shiny::runApp()",
        "Loading required package: shiny\n",
        "\nAttaching package: ‘dplyr’\n\n",
        "The following objects are masked from ‘package:stats’:\n\n    filter, lag\n\n",
        "The following objects are masked from ‘package:base’:\n\n    intersect, setdiff, setequal, union\n\n",
        "\nListening on http://127.0.0.1:4235\n",
        "Warning:",
        " \u001B[38;5;232mUsing an external vector in selections was\ndeprecated in tidyselect 1.1.0.\n\u001B[36mℹ\u001B[38;5;232m Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %>% select(tot_price_per_family)\n\n  # Now:\n  data %>% select(all_of(tot_price_per_family))\n\nSee\n<https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\n\u001B[90mThis warning is displayed once every 8 hours.\u001B[38;5;232m\n\u001B[90mCall `lifecycle::last_lifecycle_warnings()` to\u001B[38;5;232m\n\u001B[90msee where this warning was generated.\u001B[38;5;232m\u001B[39m\n",
        "Warning:",
        " Error in select: Can't select columns with `tot_price_per_family`.\n\u001B[31m✖\u001B[39m Can't convert from `tot_price_per_family` <double> to <integer> due to loss of precision.\n",
        "  1: \u001B[37mshiny::runApp\u001B[39m\n",
        "\nRestarting R session...\n\n"
    ]
}